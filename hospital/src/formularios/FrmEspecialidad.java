/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;


import conexionDB.ConectarDB;
import hospital.Especialidad;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


public class FrmEspecialidad extends javax.swing.JFrame {

    /**
     * Creates new form FrmEspecialidad
     */
    public FrmEspecialidad() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCodEs = new javax.swing.JTextField();
        txtNomEs = new javax.swing.JTextField();
        lblCodEs = new javax.swing.JLabel();
        lblNomEs = new javax.swing.JLabel();
        btnInsertar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblCodEs.setText("Codigo especialidad: ");

        lblNomEs.setText("Nombre especialidad:");

        btnInsertar.setText("Insertar");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        lblTitulo.setText("Registro de especialidades medicas. ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnInsertar)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblCodEs)
                        .addComponent(lblNomEs)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNomEs)
                            .addComponent(txtCodEs)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(btnSalir)))
                .addGap(40, 40, 40))
            .addGroup(layout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(lblTitulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCodEs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCodEs))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtNomEs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNomEs))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsertar)
                    .addComponent(btnEliminar)
                    .addComponent(btnSalir)
                    .addComponent(btnActualizar))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        ConectarDB cc =new ConectarDB();
        Connection cn=cc.conexion();
        
        Especialidad espec=new Especialidad(Integer.parseInt(txtCodEs.getText()), txtNomEs.getText());
        String sql;
        if(espec.getCodEspecialidad()<0){
            JOptionPane.showMessageDialog(null,"No es posible almacenar un Codigo de especialidad negativo.");
            limpiar();
        }else{
            sql="insert into tblEspecialidades(CodEspecialidad, NombreEspecialidad) values (?,?)";
            try{
                PreparedStatement pst=cn.prepareStatement(sql);
                pst.setInt(1, espec.getCodEspecialidad());
                pst.setString(2,espec.getNomEspecialidad());

                
                int registro=pst.executeUpdate();
                if(registro>0){
                  JOptionPane.showMessageDialog(null," Registro almacenado correctamente ");
                  limpiar();  
                }
                
            }catch (HeadlessException | SQLException e){
               
               if(e.getMessage().equals("Duplicate entry '"+espec.getCodEspecialidad()+"' for key 'PRIMARY'")){
                   JOptionPane.showMessageDialog(null,"El registro ya existe" );
                   sql="Select * from tblEspecialidades WHERE CodEspecialidad= "+espec.getCodEspecialidad();
                 
                try {
                   PreparedStatement pst = cn.prepareStatement(sql);
                    ResultSet rs= pst.executeQuery(sql);
                    
                    while(rs.next()){
                        txtNomEs.setText(rs.getString(2));
                    }
                    
                    
                    
                    
                } catch (SQLException xe) {
                    JOptionPane.showMessageDialog(null," Registro no encontrado "+xe.getMessage());
                }
               }else{
                   JOptionPane.showMessageDialog(null," Registro no almacenado "+e.getMessage());
               }
               
                
                
            }
        }
        
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        ConectarDB cc =new ConectarDB();
        Connection cn=cc.conexion();
        
        Especialidad espec=new Especialidad(Integer.parseInt(txtCodEs.getText()), txtNomEs.getText());
        String sql;
        if(espec.getCodEspecialidad()<0){
            JOptionPane.showMessageDialog(null,"No hay Codigo de especialidad negativo.");

        }else{
            sql="update tblEspecialidades SET "
                +"NombreEspecialidad= '"+espec.getNomEspecialidad()+"' "
                +"WHERE CodEspecialidad= "+espec.getCodEspecialidad();
           
           try{
                PreparedStatement pst=cn.prepareStatement(sql);
               
                int registro=pst.executeUpdate();
                if(registro>0){
                  JOptionPane.showMessageDialog(null," Registro actualizado correctamente ");
                  limpiar();  
                }else{
                    JOptionPane.showMessageDialog(null," Registro no encontrado ");
                }
                
            }catch (HeadlessException | SQLException e){
               JOptionPane.showMessageDialog(null," Registro no actualizado "+e.getMessage());

            }
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        ConectarDB cc =new ConectarDB();
        Connection cn=cc.conexion();
        
        Especialidad espec=new Especialidad(Integer.parseInt(txtCodEs.getText()), txtNomEs.getText());
        String sql;
        
        if(espec.getCodEspecialidad()<0){
            JOptionPane.showMessageDialog(null,"No hay Codigo de especialidad negativo.");
            limpiar();
        }else{
            sql="DELETE FROM tblEspecialidades WHERE CodEspecialidad= "+espec.getCodEspecialidad();
            
            try{
               PreparedStatement pst = cn.prepareStatement(sql);
              
                 int registro=pst.executeUpdate();
                 if (registro>0)
                 {  
                     JOptionPane.showMessageDialog(null," Registro eliminado correctamente ");
                     limpiar();
                 }else{
                     JOptionPane.showMessageDialog(null," Registro no encontrado.");
                     limpiar();
                 }
                 
           }catch (HeadlessException | SQLException e){
           JOptionPane.showMessageDialog(null," Registro no elimiado  "+e.getMessage());
           
          

           }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

     public void limpiar(){
        txtCodEs.setText("");
        txtNomEs.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmEspecialidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmEspecialidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmEspecialidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmEspecialidad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmEspecialidad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel lblCodEs;
    private javax.swing.JLabel lblNomEs;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextField txtCodEs;
    private javax.swing.JTextField txtNomEs;
    // End of variables declaration//GEN-END:variables
}
