/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import conexionDB.ConectarDB;
import hospital.Paciente;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Sebas
 */
public class FrmPaciente extends javax.swing.JFrame {

    /**
     * Creates new form FrmPaciente
     */
    public FrmPaciente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtID = new javax.swing.JTextField();
        txtNom = new javax.swing.JTextField();
        txtApe = new javax.swing.JTextField();
        txtFna = new javax.swing.JTextField();
        txtDir = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtGen = new javax.swing.JTextField();
        txtEstc = new javax.swing.JTextField();
        lblID = new javax.swing.JLabel();
        lblNom = new javax.swing.JLabel();
        lblApe = new javax.swing.JLabel();
        lblFna = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblDir = new javax.swing.JLabel();
        lblGen = new javax.swing.JLabel();
        lblEstc = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        btnInsertar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblID.setText("ID paciente:");

        lblNom.setText("Nombres paciente:");

        lblApe.setText("Apellidos paciente:");

        lblFna.setText("Fecha nacimiento paciente(YYYY/MM/DD):");

        lblEmail.setText("Email paciente");

        lblDir.setText("Direccion paciente:");

        lblGen.setText("Genero paciente:");

        lblEstc.setText("Estado civil paciente:");

        lblTitulo.setText("Registro pacientes.");

        btnInsertar.setText("Insertar");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblID)
                            .addComponent(lblNom)
                            .addComponent(lblApe)
                            .addComponent(lblFna)
                            .addComponent(lblEmail)
                            .addComponent(lblDir)
                            .addComponent(lblGen)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnInsertar)
                                    .addComponent(lblEstc))
                                .addGap(18, 18, 18)
                                .addComponent(btnActualizar)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFna, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                                    .addComponent(txtApe)
                                    .addComponent(txtDir, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtGen, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtID)
                                    .addComponent(txtNom)
                                    .addComponent(txtEstc)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(btnEliminar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSalir))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(lblTitulo)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblTitulo)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblID))
                                                .addGap(18, 18, 18)
                                                .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(lblNom))
                                        .addGap(18, 18, 18)
                                        .addComponent(txtApe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblApe))
                                .addGap(18, 18, 18)
                                .addComponent(txtFna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblFna))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDir))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmail))
                        .addGap(18, 18, 18)
                        .addComponent(txtGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblGen))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtEstc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEstc))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsertar)
                    .addComponent(btnActualizar)
                    .addComponent(btnSalir)
                    .addComponent(btnEliminar))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        ConectarDB cc =new ConectarDB();
        Connection cn=cc.conexion();
        
        Paciente paci =new Paciente(txtFna.getText(), txtEstc.getText(), Integer.parseInt(txtID.getText()), txtNom.getText(), txtApe.getText(), txtGen.getText(), txtDir.getText(), txtEmail.getText());
        String sql;
        
        if(paci.getId()<0){
            JOptionPane.showMessageDialog(null,"No es posiblre almacenar una ID con signo negativo");
            limpiar();
            
        }else{
            sql="insert into tblPacientes(IDPaciente, Nombres, Apellidos, Fecha_nacimiento, Direccion, Email, Genero, Estado_civil) values (?,?,?,?,?,?,?,?)";

            try{
                PreparedStatement pst=cn.prepareStatement(sql);
                pst.setInt(1,paci.getId());
                pst.setString(2,paci.getNombres());
                pst.setString(3,paci.getApellidos());
                pst.setString(4, paci.getfNaciminento());
                pst.setString(5, paci.getDireccion());
                pst.setString(6, paci.getEmail());
                pst.setString(7, paci.getGenero());
                pst.setString(8, paci.getEstadoCivil());
                
                int registro=pst.executeUpdate();
                if (registro>0){  
                    JOptionPane.showMessageDialog(null," Registro almacenado correctamente ");
                    limpiar();
                }
            }catch (HeadlessException | SQLException e){
               if(e.getMessage().equals("Duplicate entry '"+paci.getId()+"' for key 'PRIMARY'")){
                   
                   JOptionPane.showMessageDialog(null,"El registro ya existe" );
                   sql="Select * from tblPacientes WHERE IDPaciente= "+paci.getId();
                 
                try {
                   PreparedStatement pst = cn.prepareStatement(sql);
                    ResultSet rs= pst.executeQuery(sql);
                    
                    while(rs.next()){
                        txtNom.setText(rs.getString(2));
                        txtApe.setText(rs.getString(3));
                        txtFna.setText(rs.getString(4));
                        txtDir.setText(rs.getString(5));
                        txtEmail.setText(rs.getString(6));
                        txtGen.setText(rs.getString(7));
                        txtEstc.setText(rs.getString(8));
                    }
                } catch (SQLException xe) {
                    JOptionPane.showMessageDialog(null," Registro no encontrado "+xe.getMessage());
                    System.out.println(xe.getMessage());
                }
               }else{
                   JOptionPane.showMessageDialog(null," Registro no almacenado "+e.getMessage());
                   System.out.println(e.getMessage());
               }
            }
        }
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        ConectarDB cc =new ConectarDB();
        Connection cn=cc.conexion();
        
        Paciente paci =new Paciente(txtFna.getText(), txtEstc.getText(), Integer.parseInt(txtID.getText()), txtNom.getText(), txtApe.getText(), txtGen.getText(), txtDir.getText(), txtEmail.getText());
        String sql;
        
        if(paci.getId()<0){
            JOptionPane.showMessageDialog(null,"No hay ID negativos");
            limpiar();
        }
        else{
            sql="update tblPacientes SET "
                +"Nombres= '"+paci.getNombres()+"',"
                +"Apellidos= '"+paci.getApellidos()+"',"
                +"Fecha_nacimiento= '"+paci.getfNaciminento()+"',"
                +"Direccion= '"+paci.getDireccion()+"'," 
                +"Email= '"+paci.getEmail()+"',"
                +"Genero= '"+paci.getGenero()+"',"
                +"Estado_civil= '"+paci.getEstadoCivil()+"'"
                +"WHERE IDPaciente= "+paci.getId();
            
            System.out.println(sql);
            
            try{
               PreparedStatement pst = cn.prepareStatement(sql);
              
                 int registro=pst.executeUpdate();
                 if (registro>0)
                 {  
                     JOptionPane.showMessageDialog(null," Registro actualizado correctamente");
                     limpiar();
                 }else{
                     JOptionPane.showMessageDialog(null," Registro no encontrado para actualizar");
                     limpiar();
                 }
                 
           }catch (HeadlessException | SQLException e){
           JOptionPane.showMessageDialog(null," Registro no actualizado "+e.getMessage());
           limpiar();
           }
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
       ConectarDB cc =new ConectarDB();
        Connection cn=cc.conexion();
        
        Paciente paci =new Paciente(txtFna.getText(), txtEstc.getText(), Integer.parseInt(txtID.getText()), txtNom.getText(), txtApe.getText(), txtGen.getText(), txtDir.getText(), txtEmail.getText());
        String sql;
        
        if(paci.getId()<0){
           JOptionPane.showMessageDialog(null,"No hay ID negativos");
       }
       else{
           sql="DELETE FROM tblPacientes WHERE IDPaciente ="+paci.getId();
           
           try{
               PreparedStatement pst = cn.prepareStatement(sql);
              
                 int registro=pst.executeUpdate();
                 if (registro>0)
                 {  
                     JOptionPane.showMessageDialog(null," Registro eliminado correctamente ");
                     limpiar();
                 }else{
                     JOptionPane.showMessageDialog(null," Registro no encontrado.");
                     limpiar();
                 }
                 
           }catch (HeadlessException | SQLException e){
           JOptionPane.showMessageDialog(null," Registro no elimiado  "+e.getMessage());
           }
           
       }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    public void limpiar(){
        txtID.setText("");
        txtNom.setText("");
        txtApe.setText("");
        txtFna.setText("");
        txtDir.setText("");
        txtEmail.setText("");
        txtGen.setText("");
        txtEstc.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPaciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel lblApe;
    private javax.swing.JLabel lblDir;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEstc;
    private javax.swing.JLabel lblFna;
    private javax.swing.JLabel lblGen;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblNom;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextField txtApe;
    private javax.swing.JTextField txtDir;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEstc;
    private javax.swing.JTextField txtFna;
    private javax.swing.JTextField txtGen;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNom;
    // End of variables declaration//GEN-END:variables
}
